unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Generics.Collections,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  djson, Vcl.ComCtrls, Vcl.StdCtrls, fytyConanExilesTypes, fytyConanExilesTypesFunctions,
  Form_ConanExiles_ItemStatModification_Entry;

type
  TformWindow = class(TForm)
    formTree: TTreeView;
    formGroupEdit: TGroupBox;
    formGroupSource: TGroupBox;
    formGroupResult: TGroupBox;
    buttonLoad: TButton;
    buttonSave: TButton;
    Form_ConanExiles_ItemStatModification_Entry0: TForm_ConanExiles_ItemStatModification_Entry;
    Form_ConanExiles_ItemStatModification_Entry1: TForm_ConanExiles_ItemStatModification_Entry;
    Form_ConanExiles_ItemStatModification_Entry2: TForm_ConanExiles_ItemStatModification_Entry;
    Form_ConanExiles_ItemStatModification_Entry3: TForm_ConanExiles_ItemStatModification_Entry;
    Form_ConanExiles_ItemStatModification_Entry4: TForm_ConanExiles_ItemStatModification_Entry;
    Form_ConanExiles_ItemStatModification_Entry5: TForm_ConanExiles_ItemStatModification_Entry;
    Form_ConanExiles_ItemStatModification_Entry6: TForm_ConanExiles_ItemStatModification_Entry;
    formSource: TMemo;
    formResult: TMemo;
    buttonApply: TButton;
    procedure buttonLoadClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure CEValueOnKeyPress(
      Sender: TObject; var Key: Char);
    procedure IsFloatClick(
      Sender: TObject);
    procedure formTreeChange(Sender: TObject; Node: TTreeNode);
    procedure IsEnabledClick(
      Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

const
  strOperator = 'OperatorID=Add';

var
  formWindow: TformWindow;
  listEntries: TList<TForm_ConanExiles_ItemStatModification_Entry>;
  tstrlistFloatIDs, tstrlistFloatNames, tstrlistIntIDs, tstrlistIntNames,
  tstrlistItemIDs, tstrlistItemNames: TStringList;
  djsonDataTable: TDJSON;
  listCEItemStatModification: TList<CEItemStatModification>;

implementation

{$R *.dfm}

procedure SplitString(Str: string; Delimiter: Char; tstringsOutput: TStrings) ;
begin
   tstringsOutput.Clear;
   tstringsOutput.Delimiter       := Delimiter;
   tstringsOutput.StrictDelimiter := True; // Requires D2006 or newer.
   tstringsOutput.DelimitedText   := Str;
end;


procedure TformWindow.buttonLoadClick(Sender: TObject);
var
  iCounter, iNumModifications, iCounterModifications,
  iAddedIndex: integer;
  treeEntry: TTreeNode;
  ceismToAdd: CEItemStatModification;
  djsonEntry, djsonISMod: TDJSON;
begin

  djsonDataTable := TdJSON.Parse(formWindow.formSource.Lines.Text);

  iCounter := 0;

  //ShowMessage('Starting loop!');

  if listCEItemStatModification.Count > 0 then
    listCEItemStatModification.Clear;

  //ShowMessage('Cleared pre-existing modifications!');

  for djsonEntry in djsonDataTable do begin

    //ShowMessage('Iteration number: '+ iCounter.ToString);

    ceismToAdd := CEItemStatModification.Create;

    //ShowMessage('Created CEItemStatModification!');

    for djsonISMod in djsonEntry['Modifications'] do begin
      //ShowMessage(djsonISMod.AsString);
      //ceismToAdd.Modifications.Add(djsonISMod.AsString);
    end;

    //ShowMessage('Added modifications to string array');

    ceismToAdd.RowName := djsonEntry['RowName'].AsString;
    //ShowMessage('Added RowName to entry! '+ ceismToAdd.RowName);

    listCEItemStatModification.Add(ceismToAdd);
    //ShowMessage('Added ItemStatModification to master list! ' + listCEItemStatModification[0].RowName);

    treeEntry := formTree.Items.AddChildObject(nil, djsonEntry['RowName'].AsString, listCEItemStatModification.Items[iCounter]);
    //ShowMessage('Added tree node!');
    if tstrlistItemIDs.IndexOf(treeEntry.Text) >= 0 then
      treeEntry.Text := treeEntry.Text + ' - ' + tstrlistItemNames[(tstrlistItemIDs.IndexOf(treeEntry.Text))]
    else
    //ShowMessage(treeEntry.text);

    Inc(iCounter);

  end;

  //ShowMessage('Finished loop');

end;

procedure TformWindow.FormCreate(Sender: TObject);
var
  strCurrentDir: string;
begin

  strCurrentDir := IncludeTrailingPathDelimiter(GetCurrentDir);

  tstrlistFloatIDs := TStringList.Create;
  tstrlistFloatNames := TStringList.Create;

  tstrlistIntIDs := TStringList.Create;
  tstrlistIntNames := TStringList.Create;

  tstrlistItemIDs := TStringList.Create;
  tstrlistItemNames := TStringList.Create;

  tstrlistFloatIDs.LoadFromFile(strCurrentDir + '_FloatIDs.txt');
  tstrlistFloatNames.LoadFromFile(strCurrentDir + '_FloatNames.txt');

  tstrlistIntIDs.LoadFromFile(strCurrentDir + '_IntIDs.txt');
  tstrlistIntNames.LoadFromFile(strCurrentDir + '_IntNames.txt');

  tstrlistItemIDs.LoadFromFile(strCurrentDir + '_AllItemIDs.txt');
  tstrlistItemNames.LoadFromFile(strCurrentDir + '_AllItemNames.txt');

  listCEItemStatModification := TList<CEItemStatModification>.Create;

  listEntries := TList<TForm_ConanExiles_ItemStatModification_Entry>.Create;
  listEntries.Add(Form_ConanExiles_ItemStatModification_Entry0);
  listEntries.Add(Form_ConanExiles_ItemStatModification_Entry1);
  listEntries.Add(Form_ConanExiles_ItemStatModification_Entry2);
  listEntries.Add(Form_ConanExiles_ItemStatModification_Entry3);
  listEntries.Add(Form_ConanExiles_ItemStatModification_Entry4);
  listEntries.Add(Form_ConanExiles_ItemStatModification_Entry5);
  listEntries.Add(Form_ConanExiles_ItemStatModification_Entry6);


end;

procedure ResetAllEntries;
var
  iCounter: integer;
  formEntry: TForm_ConanExiles_ItemStatModification_Entry;
begin

  for iCounter := 0 to listEntries.Count - 1 do begin
    formEntry := listEntries[iCounter];

    formEntry.formEnabled.Checked := false;
    formEntry.formGroup.Visible := false;
    formEntry.formIntStats.ItemIndex := 0;
    formEntry.formFloatStats.ItemIndex := 0;
    formEntry.formValue.Text := '';
  end;

end;

procedure TformWindow.formTreeChange(Sender: TObject; Node: TTreeNode);
var
  ceismFromNode: CEItemStatModification;
  iNumControls, iCounter, iNumEntries, iNumModifications: integer;
  tstrlistParsedModification: TStringList;
  formEntry: TForm_ConanExiles_ItemStatModification_Entry;
begin


  //ShowMessage('Loading TTreeNode');

  ResetAllEntries();
  ceismFromNode := Node.Data;
  //ShowMessage(ceismFromNode.RowName);

  //ShowMessage('Getting number of Item Stat Modifications!');
  iNumModifications := ceismFromNode.Modifications.Count;

  if iNumModifications > 7 then begin
    ShowMessage('There are more than 7 modifications! Aborting loading!');
    exit;
  end;

  //ShowMessage('There are less than 8 modifications!');
  tstrlistParsedModification := TStringList.Create;

  //ShowMessage('Now iterating through ' + IntToStr(iNumModifications) + ' form entries!');
  //for iCounter := 0 to iNumControls - 1 do begin
  for iCounter := 0 to iNumModifications - 1 do begin
    //ShowMessage('Looping through every entry!');

    formEntry := listEntries[iCounter];
    ShowMessage(ceismFromNode.Modifications[iCounter]);

    ParseItemStatModificationString(ceismFromNode.Modifications[iCounter], tstrlistParsedModification);

    formEntry.formEnabled.Checked := true;

    formEntry.Enabled := true;
    formEntry.Visible := true;
    formEntry.formGroup.Enabled := true;
    formEntry.formGroup.Visible := true;

    ShowMessage(tstrlistParsedModification[0]);
    ShowMessage(tstrlistParsedModification[1]);
    ShowMessage(tstrlistParsedModification[2]);

    if tstrlistParsedModification[0] = 'True' then begin

      formEntry.formFloatStats.Visible := true;
      formEntry.formFloatStats.Enabled := true;

      formEntry.formIsFloat.Checked := true;

      formEntry.formIntStats.Visible := false;
      formEntry.formIntStats.Enabled := false;

      formEntry.formFloatStats.ItemIndex := tstrlistFloatIDs.IndexOf(tstrlistParsedModification[1]);
      formEntry.formValue.Text := tstrlistParsedModification[2];

    end
    else begin

      formEntry.formFloatStats.Visible := false;
      formEntry.formFloatStats.Enabled := false;

      formEntry.formIsFloat.Checked := false;

      formEntry.formIntStats.Visible := true;
      formEntry.formIntStats.Enabled := true;

      formEntry.formIntStats.ItemIndex := tstrlistIntIDs.IndexOf(tstrlistParsedModification[1]);
      formEntry.formValue.Text := tstrlistParsedModification[2];

    end;

    tstrlistParsedModification.Delete(2);
    tstrlistParsedModification.Delete(1);
    tstrlistParsedModification.Delete(0);

  end;

  tstrlistParsedModification.Free;
  //ShowMessage('Finished looping through every entry!');

end;

procedure TFormWindow.IsEnabledClick(
  Sender: TObject);
var
  formCheckBox: TCheckBox;
  formEntry: TForm_ConanExiles_ItemStatModification_Entry;
begin

  formCheckBox := sender as TCheckBox;
  formEntry := formCheckbox.Owner as TForm_ConanExiles_ItemStatModification_Entry;

  if formCheckBox.Checked then
    formEntry.formGroup.Visible := true
  else
    formEntry.formGroup.Visible := false;

end;

procedure IsFloatToggle(formEntry: TForm_ConanExiles_ItemStatModification_Entry; bIsFloat: boolean);
begin

  if bIsFloat = true then begin
    formEntry.formIsFloat.Checked := true;
    formEntry.formIntStats.Visible := false;
    formEntry.formFloatStats.Visible := true;

  end
  else begin
    formEntry.formIsFloat.Checked := false;
    formEntry.formIntStats.Visible := true;
    formEntry.formFloatStats.Visible := false;

  end;

end;

procedure TformWindow.IsFloatClick(
  Sender: TObject);
var
  formCheckBox: TCheckBox;
  formEntry: TForm_ConanExiles_ItemStatModification_Entry;
begin

  formCheckBox := sender as TCheckBox;
  formEntry := formCheckbox.Owner as TForm_ConanExiles_ItemStatModification_Entry;

  if formCheckBox.Checked then begin

    formEntry.formIntStats.Enabled := false;
    formEntry.formIntStats.Visible := false;

    formEntry.formFloatStats.Visible := true;
    formEntry.formFloatStats.Enabled := true;

  end
  else begin

    formEntry.formIntStats.Enabled := true;
    formEntry.formIntStats.Visible := true;

    formEntry.formFloatStats.Enabled := false;
    formEntry.formFloatStats.Visible := false;

  end;

end;

procedure TformWindow.CEValueOnKeyPress(
  Sender: TObject; var Key: Char);
begin
  if not (Key in ['0'..'9', Char(VK_OEM_PERIOD), Char(VK_BACK), Char(VK_DELETE)])
  then Key := #0;
end;

end.
